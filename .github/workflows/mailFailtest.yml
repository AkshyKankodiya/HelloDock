name: mail on failure test1

on:
  schedule:
    - cron: "0 6,12,18,0 * * *"
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Select The Environment URL
        options:
          - https://app.hellodock.com/
          - https://qa.hellodock.com/
          - https://dev.hellodock.com/

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Install Playwright Allure
        run: npm install --save-dev allure-playwright

      - name: Run Playwright tests
        env:
          BASE_URL: ${{ github.event.inputs.choice }}
        run: |
          npx playwright test pass_Test.spec.ts --reporter=line,allure-playwright
        continue-on-error: true
        id: playwright-tests

      - name: Set CC Email for test failures
        if: (steps.playwright-tests.outcome == 'failure')
        run: echo "CC_EMAIL=${{ vars.FAILURE_CC_EMAIL }}" >> $GITHUB_ENV
        shell: bash

      - name: Set CC Email for test successes
        if: (steps.playwright-tests.outcome == 'success')
        run: echo "CC_EMAIL=${{ vars.SUCCESS_CC_EMAIL }}" >> $GITHUB_ENV
        shell: bash

      - name: Debug CC_EMAIL
        run: echo "CC_EMAIL=${{ env.CC_EMAIL }}"
        shell: bash

      - name: Upload Playwright test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/test-results/**'

      - name: Upload Allure Results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: ./allure-results

  publish:
    runs-on: windows-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Allure Results
        uses: actions/download-artifact@v3
        with:
          name: allure-results
          path: allure-results

      - name: Install Allure CLI
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      - name: Generate Allure Report
        run: |
          allure generate allure-results -o allure-report-${{ github.run_number }}

      - name: Debug Allure Report Directory
        run: |
          echo "Listing the Allure report directory"
          ls -R allure-report-${{ github.run_number }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: ./reports/${{ github.run_number }}

      - name: List files in gh-pages branch after deployment
        run: |
          git clone --branch gh-pages https://github.com/${{ github.repository }} gh-pages
          ls -R gh-pages

      - name: Print Allure Report URL
        run: |
          echo "Allure report is available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ github.run_number }}"
