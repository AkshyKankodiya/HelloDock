name: HelloDockWithHYS

on:
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Select The Environment URL
        options:
          - https://dev.hellodock.com/
          - https://qa.hellodock.com/
          - https://app.hellodock.com/

jobs:
  test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Allure
        run: npm install --save-dev allure-playwright

      - name: Run Playwright tests
        env:
          BASE_URL: ${{ github.event.inputs.choice }}
        run: |
          npx playwright test --reporter=line,allure-playwright || true

      # Upload Playwright test results as an artifact
      - name: Upload Playwright test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/test-results/**'

      - name: Upload Allure Results
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: ./allure-results

      - name: Get Build URL
        run: |
          echo "The Build URL is: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      # Send email notification
      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          from: Rahul <no-reply@hellodock.com>
          to: rahul.trello2020@gmail.com
          subject: Playwright Build Completed
          body: |
            Hello Rahul,

            The build process for your Playwright TypeScript project has completed. Please check the results.

            - Build URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Thanks,
            HelloDock Automation Team
          server_address: email-smtp.us-east-2.amazonaws.com
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: false

  publish:
    runs-on: windows-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Download previous Allure history (if it exists) from gh-pages
      - name: Download previous report history
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }} gh-pages
          if (Test-Path allure-results/history) {
            Remove-Item -Recurse -Force allure-results/history
          }
          if (Test-Path gh-pages/history) {
            Copy-Item -Recurse gh-pages/history allure-results/
          }

      # Step 2: Download current Allure Results
      - name: Download Allure Results
        uses: actions/download-artifact@v3
        with:
          name: allure-results
          path: allure-results

      # Step 3: Install Allure CLI
      - name: Install Allure CLI
        run: |
          npm install -g allure-commandline --save-dev
          allure --version

      # Step 4: Generate Allure Report without cleaning the history
      - name: Generate Allure Report with History
        run: |
          allure generate allure-results -o allure-report

      # Step 5: Deploy the updated Allure report to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      # Optional: Print the URL of the generated Allure report
      - name: Print Allure Report URL
        run: |
            echo "Allure report is available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
